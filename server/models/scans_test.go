// DON'T EDIT - automatically generated by structgen //

package models

import "database/sql"

func queriesCommande(tx *sql.Tx, item Commande) (Commande, error) {
	item, err := item.Insert(tx)

	if err != nil {
		return item, err
	}
	rows, err := tx.Query("SELECT * FROM commandes")
	if err != nil {
		return item, err
	}
	items, err := ScanCommandes(rows)
	if err != nil {
		return item, err
	}

	_ = items.Ids()

	item, err = item.Update(tx)
	if err != nil {
		return item, err
	}
	row := tx.QueryRow("SELECT * FROM commandes WHERE id = $1", item.Id)

	_, err = ScanCommande(row)
	return item, err
}

func queriesCommandeProduit(tx *sql.Tx, item CommandeProduit) (CommandeProduit, error) {
	err := InsertManyCommandeProduits(tx, []CommandeProduit{item})
	if err != nil {
		return item, err
	}
	rows, err := tx.Query("SELECT * FROM commande_produits")
	if err != nil {
		return item, err
	}
	items, err := ScanCommandeProduits(rows)
	if err != nil {
		return item, err
	}

	_ = len(items)

	row := tx.QueryRow(`SELECT * FROM commande_produits WHERE 
			id_commande = $1 AND id_produit = $2;`, item.IdCommande, item.IdProduit)

	_, err = ScanCommandeProduit(row)
	return item, err
}

func queriesFournisseur(tx *sql.Tx, item Fournisseur) (Fournisseur, error) {
	item, err := item.Insert(tx)

	if err != nil {
		return item, err
	}
	rows, err := tx.Query("SELECT * FROM fournisseurs")
	if err != nil {
		return item, err
	}
	items, err := ScanFournisseurs(rows)
	if err != nil {
		return item, err
	}

	_ = items.Ids()

	item, err = item.Update(tx)
	if err != nil {
		return item, err
	}
	row := tx.QueryRow("SELECT * FROM fournisseurs WHERE id = $1", item.Id)

	_, err = ScanFournisseur(row)
	return item, err
}

func queriesGroupe(tx *sql.Tx, item Groupe) (Groupe, error) {
	item, err := item.Insert(tx)

	if err != nil {
		return item, err
	}
	rows, err := tx.Query("SELECT * FROM groupes")
	if err != nil {
		return item, err
	}
	items, err := ScanGroupes(rows)
	if err != nil {
		return item, err
	}

	_ = items.Ids()

	item, err = item.Update(tx)
	if err != nil {
		return item, err
	}
	row := tx.QueryRow("SELECT * FROM groupes WHERE id = $1", item.Id)

	_, err = ScanGroupe(row)
	return item, err
}

func queriesIngredient(tx *sql.Tx, item Ingredient) (Ingredient, error) {
	item, err := item.Insert(tx)

	if err != nil {
		return item, err
	}
	rows, err := tx.Query("SELECT * FROM ingredients")
	if err != nil {
		return item, err
	}
	items, err := ScanIngredients(rows)
	if err != nil {
		return item, err
	}

	_ = items.Ids()

	item, err = item.Update(tx)
	if err != nil {
		return item, err
	}
	row := tx.QueryRow("SELECT * FROM ingredients WHERE id = $1", item.Id)

	_, err = ScanIngredient(row)
	return item, err
}

func queriesIngredientProduit(tx *sql.Tx, item IngredientProduit) (IngredientProduit, error) {
	err := InsertManyIngredientProduits(tx, []IngredientProduit{item})
	if err != nil {
		return item, err
	}
	rows, err := tx.Query("SELECT * FROM ingredient_produits")
	if err != nil {
		return item, err
	}
	items, err := ScanIngredientProduits(rows)
	if err != nil {
		return item, err
	}

	_ = len(items)

	row := tx.QueryRow(`SELECT * FROM ingredient_produits WHERE 
			id_ingredient = $1 AND id_produit = $2 AND id_utilisateur = $3;`, item.IdIngredient, item.IdProduit, item.IdUtilisateur)

	_, err = ScanIngredientProduit(row)
	return item, err
}

func queriesMenu(tx *sql.Tx, item Menu) (Menu, error) {
	item, err := item.Insert(tx)

	if err != nil {
		return item, err
	}
	rows, err := tx.Query("SELECT * FROM menus")
	if err != nil {
		return item, err
	}
	items, err := ScanMenus(rows)
	if err != nil {
		return item, err
	}

	_ = items.Ids()

	item, err = item.Update(tx)
	if err != nil {
		return item, err
	}
	row := tx.QueryRow("SELECT * FROM menus WHERE id = $1", item.Id)

	_, err = ScanMenu(row)
	return item, err
}

func queriesMenuIngredient(tx *sql.Tx, item MenuIngredient) (MenuIngredient, error) {
	err := InsertManyMenuIngredients(tx, []MenuIngredient{item})
	if err != nil {
		return item, err
	}
	rows, err := tx.Query("SELECT * FROM menu_ingredients")
	if err != nil {
		return item, err
	}
	items, err := ScanMenuIngredients(rows)
	if err != nil {
		return item, err
	}

	_ = len(items)

	row := tx.QueryRow(`SELECT * FROM menu_ingredients WHERE 
			id_menu = $1 AND id_ingredient = $2;`, item.IdMenu, item.IdIngredient)

	_, err = ScanMenuIngredient(row)
	return item, err
}

func queriesMenuRecette(tx *sql.Tx, item MenuRecette) (MenuRecette, error) {
	err := InsertManyMenuRecettes(tx, []MenuRecette{item})
	if err != nil {
		return item, err
	}
	rows, err := tx.Query("SELECT * FROM menu_recettes")
	if err != nil {
		return item, err
	}
	items, err := ScanMenuRecettes(rows)
	if err != nil {
		return item, err
	}

	_ = len(items)

	row := tx.QueryRow(`SELECT * FROM menu_recettes WHERE 
			id_menu = $1 AND id_recette = $2;`, item.IdMenu, item.IdRecette)

	_, err = ScanMenuRecette(row)
	return item, err
}

func queriesProduit(tx *sql.Tx, item Produit) (Produit, error) {
	item, err := item.Insert(tx)

	if err != nil {
		return item, err
	}
	rows, err := tx.Query("SELECT * FROM produits")
	if err != nil {
		return item, err
	}
	items, err := ScanProduits(rows)
	if err != nil {
		return item, err
	}

	_ = items.Ids()

	item, err = item.Update(tx)
	if err != nil {
		return item, err
	}
	row := tx.QueryRow("SELECT * FROM produits WHERE id = $1", item.Id)

	_, err = ScanProduit(row)
	return item, err
}

func queriesRecette(tx *sql.Tx, item Recette) (Recette, error) {
	item, err := item.Insert(tx)

	if err != nil {
		return item, err
	}
	rows, err := tx.Query("SELECT * FROM recettes")
	if err != nil {
		return item, err
	}
	items, err := ScanRecettes(rows)
	if err != nil {
		return item, err
	}

	_ = items.Ids()

	item, err = item.Update(tx)
	if err != nil {
		return item, err
	}
	row := tx.QueryRow("SELECT * FROM recettes WHERE id = $1", item.Id)

	_, err = ScanRecette(row)
	return item, err
}

func queriesRecetteIngredient(tx *sql.Tx, item RecetteIngredient) (RecetteIngredient, error) {
	err := InsertManyRecetteIngredients(tx, []RecetteIngredient{item})
	if err != nil {
		return item, err
	}
	rows, err := tx.Query("SELECT * FROM recette_ingredients")
	if err != nil {
		return item, err
	}
	items, err := ScanRecetteIngredients(rows)
	if err != nil {
		return item, err
	}

	_ = len(items)

	row := tx.QueryRow(`SELECT * FROM recette_ingredients WHERE 
			id_recette = $1 AND id_ingredient = $2;`, item.IdRecette, item.IdIngredient)

	_, err = ScanRecetteIngredient(row)
	return item, err
}

func queriesRepas(tx *sql.Tx, item Repas) (Repas, error) {
	item, err := item.Insert(tx)

	if err != nil {
		return item, err
	}
	rows, err := tx.Query("SELECT * FROM repass")
	if err != nil {
		return item, err
	}
	items, err := ScanRepass(rows)
	if err != nil {
		return item, err
	}

	_ = items.Ids()

	item, err = item.Update(tx)
	if err != nil {
		return item, err
	}
	row := tx.QueryRow("SELECT * FROM repass WHERE id = $1", item.Id)

	_, err = ScanRepas(row)
	return item, err
}

func queriesRepasGroupe(tx *sql.Tx, item RepasGroupe) (RepasGroupe, error) {
	err := InsertManyRepasGroupes(tx, []RepasGroupe{item})
	if err != nil {
		return item, err
	}
	rows, err := tx.Query("SELECT * FROM repas_groupes")
	if err != nil {
		return item, err
	}
	items, err := ScanRepasGroupes(rows)
	if err != nil {
		return item, err
	}

	_ = len(items)

	row := tx.QueryRow(`SELECT * FROM repas_groupes WHERE 
			id_repas = $1 AND id_groupe = $2;`, item.IdRepas, item.IdGroupe)

	_, err = ScanRepasGroupe(row)
	return item, err
}

func queriesRepasIngredient(tx *sql.Tx, item RepasIngredient) (RepasIngredient, error) {
	err := InsertManyRepasIngredients(tx, []RepasIngredient{item})
	if err != nil {
		return item, err
	}
	rows, err := tx.Query("SELECT * FROM repas_ingredients")
	if err != nil {
		return item, err
	}
	items, err := ScanRepasIngredients(rows)
	if err != nil {
		return item, err
	}

	_ = len(items)

	row := tx.QueryRow(`SELECT * FROM repas_ingredients WHERE 
			id_repas = $1 AND id_ingredient = $2;`, item.IdRepas, item.IdIngredient)

	_, err = ScanRepasIngredient(row)
	return item, err
}

func queriesRepasRecette(tx *sql.Tx, item RepasRecette) (RepasRecette, error) {
	err := InsertManyRepasRecettes(tx, []RepasRecette{item})
	if err != nil {
		return item, err
	}
	rows, err := tx.Query("SELECT * FROM repas_recettes")
	if err != nil {
		return item, err
	}
	items, err := ScanRepasRecettes(rows)
	if err != nil {
		return item, err
	}

	_ = len(items)

	row := tx.QueryRow(`SELECT * FROM repas_recettes WHERE 
			id_repas = $1 AND id_recette = $2;`, item.IdRepas, item.IdRecette)

	_, err = ScanRepasRecette(row)
	return item, err
}

func queriesSejour(tx *sql.Tx, item Sejour) (Sejour, error) {
	item, err := item.Insert(tx)

	if err != nil {
		return item, err
	}
	rows, err := tx.Query("SELECT * FROM sejours")
	if err != nil {
		return item, err
	}
	items, err := ScanSejours(rows)
	if err != nil {
		return item, err
	}

	_ = items.Ids()

	item, err = item.Update(tx)
	if err != nil {
		return item, err
	}
	row := tx.QueryRow("SELECT * FROM sejours WHERE id = $1", item.Id)

	_, err = ScanSejour(row)
	return item, err
}

func queriesSejourFournisseur(tx *sql.Tx, item SejourFournisseur) (SejourFournisseur, error) {
	err := InsertManySejourFournisseurs(tx, []SejourFournisseur{item})
	if err != nil {
		return item, err
	}
	rows, err := tx.Query("SELECT * FROM sejour_fournisseurs")
	if err != nil {
		return item, err
	}
	items, err := ScanSejourFournisseurs(rows)
	if err != nil {
		return item, err
	}

	_ = len(items)

	row := tx.QueryRow(`SELECT * FROM sejour_fournisseurs WHERE 
			id_sejour = $1 AND id_fournisseur = $2;`, item.IdSejour, item.IdFournisseur)

	_, err = ScanSejourFournisseur(row)
	return item, err
}

func queriesUtilisateur(tx *sql.Tx, item Utilisateur) (Utilisateur, error) {
	item, err := item.Insert(tx)

	if err != nil {
		return item, err
	}
	rows, err := tx.Query("SELECT * FROM utilisateurs")
	if err != nil {
		return item, err
	}
	items, err := ScanUtilisateurs(rows)
	if err != nil {
		return item, err
	}

	_ = items.Ids()

	item, err = item.Update(tx)
	if err != nil {
		return item, err
	}
	row := tx.QueryRow("SELECT * FROM utilisateurs WHERE id = $1", item.Id)

	_, err = ScanUtilisateur(row)
	return item, err
}

func queriesUtilisateurFournisseur(tx *sql.Tx, item UtilisateurFournisseur) (UtilisateurFournisseur, error) {
	err := InsertManyUtilisateurFournisseurs(tx, []UtilisateurFournisseur{item})
	if err != nil {
		return item, err
	}
	rows, err := tx.Query("SELECT * FROM utilisateur_fournisseurs")
	if err != nil {
		return item, err
	}
	items, err := ScanUtilisateurFournisseurs(rows)
	if err != nil {
		return item, err
	}

	_ = len(items)

	row := tx.QueryRow(`SELECT * FROM utilisateur_fournisseurs WHERE 
			id_utilisateur = $1 AND id_fournisseur = $2;`, item.IdUtilisateur, item.IdFournisseur)

	_, err = ScanUtilisateurFournisseur(row)
	return item, err
}
