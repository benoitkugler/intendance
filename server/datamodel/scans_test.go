// DON'T EDIT *** generated by scaneo *** DON'T EDIT //

package datamodel

import (
	"database/sql"
	"math/rand"
)


func randUtilisateur() Utilisateur {
	return Utilisateur{ 
		Id: rand.Int63n(1<<20),
		Password: randstring(),
		Mail: randstring(),
		PrenomNom: randstring(),
	}
}

func queriesUtilisateur(tx *sql.Tx, item Utilisateur) (Utilisateur, error) {
	item, err := item.Insert(tx)
	if err != nil {
		return item, err
	}
	return item.Update(tx)
}


func randIngredient() Ingredient {
	return Ingredient{ 
		Id: rand.Int63n(1<<20),
		Nom: randstring(),
		Unite: randUnite(),
		Categorie: randstring(),
		Callories: randCallories(),
	}
}

func queriesIngredient(tx *sql.Tx, item Ingredient) (Ingredient, error) {
	item, err := item.Insert(tx)
	if err != nil {
		return item, err
	}
	return item.Update(tx)
}


func randRecette() Recette {
	return Recette{ 
		Id: rand.Int63n(1<<20),
		IdProprietaire: rand.Int63n(1<<20),
		Nom: randstring(),
		ModeEmploi: randstring(),
	}
}

func queriesRecette(tx *sql.Tx, item Recette) (Recette, error) {
	item, err := item.Insert(tx)
	if err != nil {
		return item, err
	}
	return item.Update(tx)
}


func randMenu() Menu {
	return Menu{ 
		Id: rand.Int63n(1<<20),
		IdProprietaire: rand.Int63n(1<<20),
		Commentaire: randstring(),
	}
}

func queriesMenu(tx *sql.Tx, item Menu) (Menu, error) {
	item, err := item.Insert(tx)
	if err != nil {
		return item, err
	}
	return item.Update(tx)
}


func randSejour() Sejour {
	return Sejour{ 
		Id: rand.Int63n(1<<20),
		IdProprietaire: rand.Int63n(1<<20),
		DateDebut: randTime(),
		Nom: randstring(),
	}
}

func queriesSejour(tx *sql.Tx, item Sejour) (Sejour, error) {
	item, err := item.Insert(tx)
	if err != nil {
		return item, err
	}
	return item.Update(tx)
}


func randFournisseur() Fournisseur {
	return Fournisseur{ 
		Id: rand.Int63n(1<<20),
		Nom: randstring(),
		DelaiCommande: rand.Int63n(1<<20),
		JoursLivraison: randJoursLivraison(),
	}
}

func queriesFournisseur(tx *sql.Tx, item Fournisseur) (Fournisseur, error) {
	item, err := item.Insert(tx)
	if err != nil {
		return item, err
	}
	return item.Update(tx)
}


func randProduit() Produit {
	return Produit{ 
		Id: rand.Int63n(1<<20),
		IdFournisseur: rand.Int63n(1<<20),
		Nom: randstring(),
		Conditionnement: randConditionnement(),
		Prix: randfloat64(),
		ReferenceFournisseur: randstring(),
	}
}

func queriesProduit(tx *sql.Tx, item Produit) (Produit, error) {
	item, err := item.Insert(tx)
	if err != nil {
		return item, err
	}
	return item.Update(tx)
}


func randCommande() Commande {
	return Commande{ 
		Id: rand.Int63n(1<<20),
		IdProprietaire: rand.Int63n(1<<20),
		DateLivraison: randTime(),
	}
}

func queriesCommande(tx *sql.Tx, item Commande) (Commande, error) {
	item, err := item.Insert(tx)
	if err != nil {
		return item, err
	}
	return item.Update(tx)
}


