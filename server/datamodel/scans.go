// DON'T EDIT *** generated by scaneo *** DON'T EDIT //

package datamodel

import "database/sql"

func ScanUtilisateur(r *sql.Row) (Utilisateur, error) {
	var s Utilisateur
	if err := r.Scan(
		&s.Id,
		&s.Password,
		&s.Mail,
		&s.PrenomNom,
	); err != nil {
		return Utilisateur{}, err
	}
	return s, nil
}

func ScanUtilisateurs(rs *sql.Rows) ([]Utilisateur, error) {
	structs := make([]Utilisateur, 0, 16)
	var err error
	for rs.Next() {
		var s Utilisateur
		if err = rs.Scan(
			&s.Id,
			&s.Password,
			&s.Mail,
			&s.PrenomNom,
		); err != nil {
			return nil, err
		}
		structs = append(structs, s)
	}
	if err = rs.Err(); err != nil {
		return nil, err
	}
	return structs, nil
}

// Insert Utilisateur in the database and returns the item with id filled.
func (item Utilisateur) Insert(tx *sql.Tx) (out Utilisateur, err error) {
	r := tx.QueryRow(`INSERT INTO utilisateurs (
		password,mail,prenom_nom
		) VALUES (
		$1,$2,$3
		) RETURNING 
		id,password,mail,prenom_nom;
		`,item.Password,item.Mail,item.PrenomNom)
	return ScanUtilisateur(r)
}

// Update Utilisateur in the database and returns the new version.
func (item Utilisateur) Update(tx *sql.Tx) (out Utilisateur, err error) {
	r := tx.QueryRow(`UPDATE utilisateurs SET (
		password,mail,prenom_nom
		) = (
		$2,$3,$4
		) WHERE id = $1 RETURNING 
		id,password,mail,prenom_nom;
		`,item.Id,item.Password,item.Mail,item.PrenomNom)
	return ScanUtilisateur(r)
}

// Delete Utilisateur in the database and the return the id.
// Only the field 'Id' is used.
func (item Utilisateur) Delete(tx *sql.Tx) (int64, error) {
	var deleted_id int64
	r := tx.QueryRow("DELETE FROM utilisateurs WHERE id = $1 RETURNING id;", item.Id)
	err := r.Scan(&deleted_id)
	return deleted_id, err
}

func ScanIngredient(r *sql.Row) (Ingredient, error) {
	var s Ingredient
	if err := r.Scan(
		&s.Id,
		&s.Nom,
		&s.Unite,
		&s.Categorie,
		&s.Callories,
	); err != nil {
		return Ingredient{}, err
	}
	return s, nil
}

func ScanIngredients(rs *sql.Rows) ([]Ingredient, error) {
	structs := make([]Ingredient, 0, 16)
	var err error
	for rs.Next() {
		var s Ingredient
		if err = rs.Scan(
			&s.Id,
			&s.Nom,
			&s.Unite,
			&s.Categorie,
			&s.Callories,
		); err != nil {
			return nil, err
		}
		structs = append(structs, s)
	}
	if err = rs.Err(); err != nil {
		return nil, err
	}
	return structs, nil
}

// Insert Ingredient in the database and returns the item with id filled.
func (item Ingredient) Insert(tx *sql.Tx) (out Ingredient, err error) {
	r := tx.QueryRow(`INSERT INTO ingredients (
		nom,unite,categorie,callories
		) VALUES (
		$1,$2,$3,$4
		) RETURNING 
		id,nom,unite,categorie,callories;
		`,item.Nom,item.Unite,item.Categorie,item.Callories)
	return ScanIngredient(r)
}

// Update Ingredient in the database and returns the new version.
func (item Ingredient) Update(tx *sql.Tx) (out Ingredient, err error) {
	r := tx.QueryRow(`UPDATE ingredients SET (
		nom,unite,categorie,callories
		) = (
		$2,$3,$4,$5
		) WHERE id = $1 RETURNING 
		id,nom,unite,categorie,callories;
		`,item.Id,item.Nom,item.Unite,item.Categorie,item.Callories)
	return ScanIngredient(r)
}

// Delete Ingredient in the database and the return the id.
// Only the field 'Id' is used.
func (item Ingredient) Delete(tx *sql.Tx) (int64, error) {
	var deleted_id int64
	r := tx.QueryRow("DELETE FROM ingredients WHERE id = $1 RETURNING id;", item.Id)
	err := r.Scan(&deleted_id)
	return deleted_id, err
}

func ScanRecette(r *sql.Row) (Recette, error) {
	var s Recette
	if err := r.Scan(
		&s.Id,
		&s.IdProprietaire,
		&s.Nom,
		&s.ModeEmploi,
	); err != nil {
		return Recette{}, err
	}
	return s, nil
}

func ScanRecettes(rs *sql.Rows) ([]Recette, error) {
	structs := make([]Recette, 0, 16)
	var err error
	for rs.Next() {
		var s Recette
		if err = rs.Scan(
			&s.Id,
			&s.IdProprietaire,
			&s.Nom,
			&s.ModeEmploi,
		); err != nil {
			return nil, err
		}
		structs = append(structs, s)
	}
	if err = rs.Err(); err != nil {
		return nil, err
	}
	return structs, nil
}

// Insert Recette in the database and returns the item with id filled.
func (item Recette) Insert(tx *sql.Tx) (out Recette, err error) {
	r := tx.QueryRow(`INSERT INTO recettes (
		id_proprietaire,nom,mode_emploi
		) VALUES (
		$1,$2,$3
		) RETURNING 
		id,id_proprietaire,nom,mode_emploi;
		`,item.IdProprietaire,item.Nom,item.ModeEmploi)
	return ScanRecette(r)
}

// Update Recette in the database and returns the new version.
func (item Recette) Update(tx *sql.Tx) (out Recette, err error) {
	r := tx.QueryRow(`UPDATE recettes SET (
		id_proprietaire,nom,mode_emploi
		) = (
		$2,$3,$4
		) WHERE id = $1 RETURNING 
		id,id_proprietaire,nom,mode_emploi;
		`,item.Id,item.IdProprietaire,item.Nom,item.ModeEmploi)
	return ScanRecette(r)
}

// Delete Recette in the database and the return the id.
// Only the field 'Id' is used.
func (item Recette) Delete(tx *sql.Tx) (int64, error) {
	var deleted_id int64
	r := tx.QueryRow("DELETE FROM recettes WHERE id = $1 RETURNING id;", item.Id)
	err := r.Scan(&deleted_id)
	return deleted_id, err
}

func ScanMenu(r *sql.Row) (Menu, error) {
	var s Menu
	if err := r.Scan(
		&s.Id,
		&s.IdProprietaire,
		&s.Commentaire,
	); err != nil {
		return Menu{}, err
	}
	return s, nil
}

func ScanMenus(rs *sql.Rows) ([]Menu, error) {
	structs := make([]Menu, 0, 16)
	var err error
	for rs.Next() {
		var s Menu
		if err = rs.Scan(
			&s.Id,
			&s.IdProprietaire,
			&s.Commentaire,
		); err != nil {
			return nil, err
		}
		structs = append(structs, s)
	}
	if err = rs.Err(); err != nil {
		return nil, err
	}
	return structs, nil
}

// Insert Menu in the database and returns the item with id filled.
func (item Menu) Insert(tx *sql.Tx) (out Menu, err error) {
	r := tx.QueryRow(`INSERT INTO menus (
		id_proprietaire,commentaire
		) VALUES (
		$1,$2
		) RETURNING 
		id,id_proprietaire,commentaire;
		`,item.IdProprietaire,item.Commentaire)
	return ScanMenu(r)
}

// Update Menu in the database and returns the new version.
func (item Menu) Update(tx *sql.Tx) (out Menu, err error) {
	r := tx.QueryRow(`UPDATE menus SET (
		id_proprietaire,commentaire
		) = (
		$2,$3
		) WHERE id = $1 RETURNING 
		id,id_proprietaire,commentaire;
		`,item.Id,item.IdProprietaire,item.Commentaire)
	return ScanMenu(r)
}

// Delete Menu in the database and the return the id.
// Only the field 'Id' is used.
func (item Menu) Delete(tx *sql.Tx) (int64, error) {
	var deleted_id int64
	r := tx.QueryRow("DELETE FROM menus WHERE id = $1 RETURNING id;", item.Id)
	err := r.Scan(&deleted_id)
	return deleted_id, err
}

func ScanSejour(r *sql.Row) (Sejour, error) {
	var s Sejour
	if err := r.Scan(
		&s.Id,
		&s.IdProprietaire,
		&s.DateDebut,
		&s.Nom,
	); err != nil {
		return Sejour{}, err
	}
	return s, nil
}

func ScanSejours(rs *sql.Rows) ([]Sejour, error) {
	structs := make([]Sejour, 0, 16)
	var err error
	for rs.Next() {
		var s Sejour
		if err = rs.Scan(
			&s.Id,
			&s.IdProprietaire,
			&s.DateDebut,
			&s.Nom,
		); err != nil {
			return nil, err
		}
		structs = append(structs, s)
	}
	if err = rs.Err(); err != nil {
		return nil, err
	}
	return structs, nil
}

// Insert Sejour in the database and returns the item with id filled.
func (item Sejour) Insert(tx *sql.Tx) (out Sejour, err error) {
	r := tx.QueryRow(`INSERT INTO sejours (
		id_proprietaire,date_debut,nom
		) VALUES (
		$1,$2,$3
		) RETURNING 
		id,id_proprietaire,date_debut,nom;
		`,item.IdProprietaire,item.DateDebut,item.Nom)
	return ScanSejour(r)
}

// Update Sejour in the database and returns the new version.
func (item Sejour) Update(tx *sql.Tx) (out Sejour, err error) {
	r := tx.QueryRow(`UPDATE sejours SET (
		id_proprietaire,date_debut,nom
		) = (
		$2,$3,$4
		) WHERE id = $1 RETURNING 
		id,id_proprietaire,date_debut,nom;
		`,item.Id,item.IdProprietaire,item.DateDebut,item.Nom)
	return ScanSejour(r)
}

// Delete Sejour in the database and the return the id.
// Only the field 'Id' is used.
func (item Sejour) Delete(tx *sql.Tx) (int64, error) {
	var deleted_id int64
	r := tx.QueryRow("DELETE FROM sejours WHERE id = $1 RETURNING id;", item.Id)
	err := r.Scan(&deleted_id)
	return deleted_id, err
}

func ScanFournisseur(r *sql.Row) (Fournisseur, error) {
	var s Fournisseur
	if err := r.Scan(
		&s.Id,
		&s.Nom,
		&s.DelaiCommande,
		&s.JoursLivraison,
	); err != nil {
		return Fournisseur{}, err
	}
	return s, nil
}

func ScanFournisseurs(rs *sql.Rows) ([]Fournisseur, error) {
	structs := make([]Fournisseur, 0, 16)
	var err error
	for rs.Next() {
		var s Fournisseur
		if err = rs.Scan(
			&s.Id,
			&s.Nom,
			&s.DelaiCommande,
			&s.JoursLivraison,
		); err != nil {
			return nil, err
		}
		structs = append(structs, s)
	}
	if err = rs.Err(); err != nil {
		return nil, err
	}
	return structs, nil
}

// Insert Fournisseur in the database and returns the item with id filled.
func (item Fournisseur) Insert(tx *sql.Tx) (out Fournisseur, err error) {
	r := tx.QueryRow(`INSERT INTO fournisseurs (
		nom,delai_commande,jours_livraison
		) VALUES (
		$1,$2,$3
		) RETURNING 
		id,nom,delai_commande,jours_livraison;
		`,item.Nom,item.DelaiCommande,item.JoursLivraison)
	return ScanFournisseur(r)
}

// Update Fournisseur in the database and returns the new version.
func (item Fournisseur) Update(tx *sql.Tx) (out Fournisseur, err error) {
	r := tx.QueryRow(`UPDATE fournisseurs SET (
		nom,delai_commande,jours_livraison
		) = (
		$2,$3,$4
		) WHERE id = $1 RETURNING 
		id,nom,delai_commande,jours_livraison;
		`,item.Id,item.Nom,item.DelaiCommande,item.JoursLivraison)
	return ScanFournisseur(r)
}

// Delete Fournisseur in the database and the return the id.
// Only the field 'Id' is used.
func (item Fournisseur) Delete(tx *sql.Tx) (int64, error) {
	var deleted_id int64
	r := tx.QueryRow("DELETE FROM fournisseurs WHERE id = $1 RETURNING id;", item.Id)
	err := r.Scan(&deleted_id)
	return deleted_id, err
}

func ScanProduit(r *sql.Row) (Produit, error) {
	var s Produit
	if err := r.Scan(
		&s.Id,
		&s.IdFournisseur,
		&s.Nom,
		&s.Conditionnement,
		&s.Prix,
		&s.ReferenceFournisseur,
	); err != nil {
		return Produit{}, err
	}
	return s, nil
}

func ScanProduits(rs *sql.Rows) ([]Produit, error) {
	structs := make([]Produit, 0, 16)
	var err error
	for rs.Next() {
		var s Produit
		if err = rs.Scan(
			&s.Id,
			&s.IdFournisseur,
			&s.Nom,
			&s.Conditionnement,
			&s.Prix,
			&s.ReferenceFournisseur,
		); err != nil {
			return nil, err
		}
		structs = append(structs, s)
	}
	if err = rs.Err(); err != nil {
		return nil, err
	}
	return structs, nil
}

// Insert Produit in the database and returns the item with id filled.
func (item Produit) Insert(tx *sql.Tx) (out Produit, err error) {
	r := tx.QueryRow(`INSERT INTO produits (
		id_fournisseur,nom,conditionnement,prix,reference_fournisseur
		) VALUES (
		$1,$2,$3,$4,$5
		) RETURNING 
		id,id_fournisseur,nom,conditionnement,prix,reference_fournisseur;
		`,item.IdFournisseur,item.Nom,item.Conditionnement,item.Prix,item.ReferenceFournisseur)
	return ScanProduit(r)
}

// Update Produit in the database and returns the new version.
func (item Produit) Update(tx *sql.Tx) (out Produit, err error) {
	r := tx.QueryRow(`UPDATE produits SET (
		id_fournisseur,nom,conditionnement,prix,reference_fournisseur
		) = (
		$2,$3,$4,$5,$6
		) WHERE id = $1 RETURNING 
		id,id_fournisseur,nom,conditionnement,prix,reference_fournisseur;
		`,item.Id,item.IdFournisseur,item.Nom,item.Conditionnement,item.Prix,item.ReferenceFournisseur)
	return ScanProduit(r)
}

// Delete Produit in the database and the return the id.
// Only the field 'Id' is used.
func (item Produit) Delete(tx *sql.Tx) (int64, error) {
	var deleted_id int64
	r := tx.QueryRow("DELETE FROM produits WHERE id = $1 RETURNING id;", item.Id)
	err := r.Scan(&deleted_id)
	return deleted_id, err
}

func ScanCommande(r *sql.Row) (Commande, error) {
	var s Commande
	if err := r.Scan(
		&s.Id,
		&s.IdProprietaire,
		&s.DateLivraison,
	); err != nil {
		return Commande{}, err
	}
	return s, nil
}

func ScanCommandes(rs *sql.Rows) ([]Commande, error) {
	structs := make([]Commande, 0, 16)
	var err error
	for rs.Next() {
		var s Commande
		if err = rs.Scan(
			&s.Id,
			&s.IdProprietaire,
			&s.DateLivraison,
		); err != nil {
			return nil, err
		}
		structs = append(structs, s)
	}
	if err = rs.Err(); err != nil {
		return nil, err
	}
	return structs, nil
}

// Insert Commande in the database and returns the item with id filled.
func (item Commande) Insert(tx *sql.Tx) (out Commande, err error) {
	r := tx.QueryRow(`INSERT INTO commandes (
		id_proprietaire,date_livraison
		) VALUES (
		$1,$2
		) RETURNING 
		id,id_proprietaire,date_livraison;
		`,item.IdProprietaire,item.DateLivraison)
	return ScanCommande(r)
}

// Update Commande in the database and returns the new version.
func (item Commande) Update(tx *sql.Tx) (out Commande, err error) {
	r := tx.QueryRow(`UPDATE commandes SET (
		id_proprietaire,date_livraison
		) = (
		$2,$3
		) WHERE id = $1 RETURNING 
		id,id_proprietaire,date_livraison;
		`,item.Id,item.IdProprietaire,item.DateLivraison)
	return ScanCommande(r)
}

// Delete Commande in the database and the return the id.
// Only the field 'Id' is used.
func (item Commande) Delete(tx *sql.Tx) (int64, error) {
	var deleted_id int64
	r := tx.QueryRow("DELETE FROM commandes WHERE id = $1 RETURNING id;", item.Id)
	err := r.Scan(&deleted_id)
	return deleted_id, err
}


